"use strict";
/*
 * Simple Learn Collections app written in TypeScript without external frameworks.
 *
 * This application provides two main views: a list of imported collections and an
 * import page where users can paste JSON data generated by an AI. Collections
 * are stored in the browser's localStorage so that they persist across page
 * reloads. The JSON should follow the structure described in the app; however,
 * basic validation ensures that at least a name and materials array exist.
 */
// Helpers to load and save collections from localStorage
function loadCollections() {
    const raw = window.localStorage.getItem('learnCollections');
    if (!raw)
        return [];
    try {
        return JSON.parse(raw);
    }
    catch (e) {
        console.warn('Failed to parse collections from localStorage', e);
        return [];
    }
}
function saveCollections(cols) {
    window.localStorage.setItem('learnCollections', JSON.stringify(cols));
}
// Generate a simple unique ID based on current time
function generateId() {
    return `${Date.now()}-${Math.random().toString(36).substr(2, 9)}`;
}
// Render functions
function renderCollectionsView() {
    const main = document.getElementById('main');
    main.innerHTML = '';
    const collections = loadCollections();
    if (collections.length === 0) {
        const p = document.createElement('p');
        p.textContent = 'No collections imported yet. Use the "Import JSON" tab to add your first collection.';
        main.appendChild(p);
        return;
    }
    collections.forEach((collection) => {
        const card = document.createElement('div');
        card.className = 'collection-card';
        card.textContent = collection.name;
        card.onclick = () => {
            renderCollectionDetail(collection);
        };
        main.appendChild(card);
    });
}
function renderCollectionDetail(collection) {
    const main = document.getElementById('main');
    main.innerHTML = '';
    const backButton = document.createElement('button');
    backButton.textContent = '← Back to Collections';
    backButton.style.marginBottom = '1rem';
    backButton.onclick = () => {
        renderCollectionsView();
        setActiveButton('collectionsButton');
    };
    main.appendChild(backButton);
    const title = document.createElement('h2');
    title.textContent = collection.name;
    main.appendChild(title);
    if (collection.description) {
        const desc = document.createElement('p');
        desc.textContent = collection.description;
        main.appendChild(desc);
    }
    collection.materials.forEach((material) => {
        const matDiv = document.createElement('div');
        matDiv.className = 'material';
        const matTitle = document.createElement('h3');
        matTitle.textContent = material.title;
        matDiv.appendChild(matTitle);
        const meta = document.createElement('p');
        meta.textContent = `${material.subject} • Year ${material.year} • ${material.type}`;
        matDiv.appendChild(meta);
        const content = document.createElement('p');
        content.textContent = material.content;
        matDiv.appendChild(content);
        if (material.questions && material.questions.length > 0) {
            const questionsHeader = document.createElement('h4');
            questionsHeader.textContent = 'Questions:';
            matDiv.appendChild(questionsHeader);
            const ul = document.createElement('ul');
            material.questions.forEach((q) => {
                const li = document.createElement('li');
                li.textContent = `${q.q} — ${q.a.join(', ')}`;
                ul.appendChild(li);
            });
            matDiv.appendChild(ul);
        }
        main.appendChild(matDiv);
    });
}
function renderImportView() {
    const main = document.getElementById('main');
    main.innerHTML = '';
    const instructions = document.createElement('p');
    instructions.textContent = 'Paste your JSON below. It should contain a collection object with a name and a materials array.';
    main.appendChild(instructions);
    const textarea = document.createElement('textarea');
    main.appendChild(textarea);
    const importButton = document.createElement('button');
    importButton.textContent = 'Parse & Preview';
    importButton.style.display = 'block';
    importButton.style.marginTop = '0.5rem';
    main.appendChild(importButton);
    const previewDiv = document.createElement('div');
    main.appendChild(previewDiv);
    importButton.onclick = () => {
        previewDiv.innerHTML = '';
        let parsed;
        try {
            // Remove code fences if present and attempt to parse
            const raw = textarea.value.trim();
            const cleaned = raw
                .replace(/^```json\n|\n```$/g, '')
                .replace(/^```\n|\n```$/g, '');
            parsed = JSON.parse(cleaned);
        }
        catch (e) {
            const err = document.createElement('div');
            err.className = 'error';
            err.textContent = 'Invalid JSON: ' + e.message;
            previewDiv.appendChild(err);
            return;
        }
        // Basic validation
        if (!parsed || typeof parsed !== 'object' || !parsed.name || !Array.isArray(parsed.materials)) {
            const err = document.createElement('div');
            err.className = 'error';
            err.textContent = 'The JSON must contain at least a "name" field and a "materials" array.';
            previewDiv.appendChild(err);
            return;
        }
        // Show preview
        const pre = document.createElement('pre');
        pre.className = 'preview';
        pre.textContent = JSON.stringify(parsed, null, 2);
        previewDiv.appendChild(pre);
        const saveBtn = document.createElement('button');
        saveBtn.textContent = 'Save Collection';
        saveBtn.style.marginTop = '0.5rem';
        previewDiv.appendChild(saveBtn);
        saveBtn.onclick = () => {
            const collections = loadCollections();
            const newCollection = {
                id: generateId(),
                name: parsed.name,
                description: parsed.description,
                tags: parsed.tags,
                materials: parsed.materials,
            };
            collections.push(newCollection);
            saveCollections(collections);
            // Clear textarea and preview and navigate back to collections view
            textarea.value = '';
            previewDiv.innerHTML = '';
            renderCollectionsView();
            setActiveButton('collectionsButton');
        };
    };
}
function setActiveButton(id) {
    const collectionsBtn = document.getElementById('collectionsButton');
    const importBtn = document.getElementById('importButton');
    if (id === 'collectionsButton') {
        collectionsBtn.classList.add('active');
        importBtn.classList.remove('active');
    }
    else {
        importBtn.classList.add('active');
        collectionsBtn.classList.remove('active');
    }
}
// Initial setup
function init() {
    const collectionsBtn = document.getElementById('collectionsButton');
    const importBtn = document.getElementById('importButton');
    collectionsBtn.onclick = () => {
        renderCollectionsView();
        setActiveButton('collectionsButton');
    };
    importBtn.onclick = () => {
        renderImportView();
        setActiveButton('importButton');
    };
    // Show collections view by default
    renderCollectionsView();
}
document.addEventListener('DOMContentLoaded', init);
